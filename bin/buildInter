#!/usr/bin/env node

var fs = require('fs'),
    Path = require('path'),
    seq = require('seq'),
    uglifyJs = require('uglify-js'),
    uglifyAst = require('uglifyast'),
    passError = require('passerror'),
    _ = require('underscore'),
    fsTools = require('../lib/fsTools'),
    leftPad = require('../lib/leftPad'),
    normalizeLocaleId = require('../lib/normalizeLocaleId'),
    convertObjectsWithIntegerKeysToArrays = require('../lib/convertObjectsWithIntegerKeysToArrays'),
    ZoneInfo = require('../lib/ZoneInfo'),
    optimist = require('optimist')
        .usage('$0 [--cldrpath <pathToCldr>] [-o <outputFileName>] --locale localeId,localeId...')
        .options('cldrpath', {
            default: '/usr/share/cldr',
            describe: 'Path to your CLDR files'
        })
        .options('zoneinfopath', {
            default: '/usr/share/zoneinfo',
            describe: 'Path to your zoneinfo database'
        }),
    cldr = require('cldr')(optimist.argv.cldrpath),
    zoneInfo = new ZoneInfo(optimist.argv.zoneinfopath),
    worldInfo = require('../lib/worldInfo'),
    targetLocaleIds;

optimist = optimist
    .options('o', {
        describe: 'Output directory (or output file if --onefile is specified)'
    })
    .options('locales', {
        describe: 'Comma-separated list of locales to build',
        type: 'string'
    })
    .options('bundle', {
        default: false,
        describe: 'Generate one bundle with all locale data in it (see also --localeidvar). The default is to generate one file per locale'
    })
    .options('golf', {
        default: false,
        describe: 'Optimize the size and memory footprint of the generated JavaScript by pulling common structures into vars (at the expense of readability)'
    })
    .check(function (argv) {
        if (!argv.bundle && !argv.o) {
            throw new Error('-o is mandatory unless --bundle is specified');
        }
    })
    .options('localeidvar', {
        describe: 'The name of the JavaScript identifier used to determine which locale to select (only applicable with --bundle). If you don\'t use buildDevelopment (AssetGraph-builder) your own code must set this variable before the locale library is loaded',
        type: 'string',
        default: 'LOCALEID'
    })
    .options('calendars', {
        describe: 'Comma-separated list of calendars to include. Defaults to all. Supported values: ' + cldr.calendarIds.join(", "),
        type: 'string'
    })
    .options('numbers', {
        describe: 'Include number formats and symbols (inter.numbers, inter.getNumberRenderer, inter.getFileSizeRenderer, inter.getPercentageRenderer)',
        type: 'boolean',
        default: false
    })
    .options('numbersystems', {
        describe: 'Comma-separated list of number systems to include. Defaults to all. Supported values: ' + cldr.numberSystemIds.join(", "),
        type: 'string'
    })
    .options('languagesincludedonly', {
        describe: 'Include information about the locales included in the build only. Useful for displaying a list of the supported locales in a web app while keeping down size of the library',
        type: 'boolean',
        default: false
    });

var descriptionByTypeAndOptionName = {
    complex: {
        timezones: 'time zone info and display names (inter.timeZones)',
        territories: 'territory info and display names (inter.territories)',
        countries: 'country info and display names (inter.countries, subset of inter.territories)',
        regions: 'region info and display names (inter.regions, subset of inter.territories)',
        languages: 'language info and display names (inter.languages)',
        scripts: 'script display names (inter.scripts)',
        currencies: 'currency info and display names (inter.currencies)',
        languagesNative: 'the native display names of languages, if available (requires --languages)',
        rbnf: 'rbnf rules (inter.renderDigitsOrdinal, inter.renderSpelloutNumbering...)',
        pluralRules: 'plural rules (inter.pluralRule function)'
    },
    simple: {
        delimiters: 'quotation delimiters (inter.delimiters)',
        listPatterns: 'list patterns (inter.listPatterns and inter.renderList)',
        unitPatterns: 'unit patterns (inter.unitPatterns and inter.getUnitRenderer)',
        timeZoneFormats: 'time zone formats (inter.timeZoneFormats)',
        characters: 'characters (inter.exemplarCharacters, inter.ellipsis)'
    },
    calendar: {
        dateFormats: 'date and time formats (inter.dateFormats and others, implied by --dateintervalformats)',
        dateIntervalFormats: 'date and time interval formats (inter.dateIntervalFormats)',
        dateIntervalFallbackFormat: 'date interval fallback format (inter.dateIntervalFallbackFormat). Implied by --dateintervalformats',
        dayNames: 'day names (inter.calendars[calendarId].dayNames). Implied by --dateformats and --dateintervalformats',
        dayPeriods: 'day periods (inter.calendars[calendarId].dayPeriods). Implied by --dateformats and --dateintervalformats',
        cyclicNames: 'cyclic names (inter.calendars[calendarId].cyclicNames). Implied by --dateformats and --dateintervalformats',
        monthNames: 'month names (inter.calendars[calendarId].monthNames). Implied by --dateformats and --dateintervalformats',
        monthPatterns: 'month patterns (inter.calendars[calendarId].monthPatterns). Implied by --dateformats and --dateintervalformats',
        eraNames: 'era names (inter.calendars[calendarId].eraNames). Implied by --dateformats and --dateintervalformats',
        quarterNames: 'quarter names (inter.calendars[calendarId].quarterNames). Implied by --dateformats and --dateintervalformats',
        fields: 'field display names (inter.calendars[calendarId].fields)'
    }
};

var optionNamesByType = {},
    allOptionNames = [];

Object.keys(descriptionByTypeAndOptionName).forEach(function (type) {
    var optionNames = Object.keys(descriptionByTypeAndOptionName[type]);
    optionNamesByType[type] = optionNames;
    Array.prototype.push.apply(allOptionNames, optionNames);
    optionNames.forEach(function (optionName) {
        optimist = optimist.options(optionName.toLowerCase(), {
            describe: 'Include ' + descriptionByTypeAndOptionName[type][optionName],
            type: 'boolean',
            default: false
        });
    });
});

optimist = optimist.options('all', {
    describe: 'Extract all data (equivalent to ' + allOptionNames.map(function (optionName) {
        return '--' + optionName.toLowerCase();
    }).join(' ') + ')',
    type: 'boolean',
    default: false
});

var commandLineOptions = optimist.argv;

if (commandLineOptions.all) {
    allOptionNames.forEach(function (optionName) {
        commandLineOptions[optionName.toLowerCase()] = true;
    });
}

if (commandLineOptions.dateformats || commandLineOptions.dateintervalformats) {
    ['eraNames', 'quarterNames', 'dayPeriods', 'cyclicNames', 'monthNames', 'monthPatterns'].forEach(function (calendarOptionName) {
        commandLineOptions[calendarOptionName.toLowerCase()] = true;
    });
}
if (commandLineOptions.dateintervalformats) {
    commandLineOptions.dateintervalfallbackformat = true;
}

if (commandLineOptions.locales) {
    targetLocaleIds = _.flatten(_.flatten([commandLineOptions.locales]).map(function (localeId) {return localeId.split(",");})).map(normalizeLocaleId);
} else {
    targetLocaleIds = cldr.localeIds;
}

function expandLocaleIdToPrioritizedList(localeId) {
    if (!localeId) {
        return [];
    }
    var localeIds = [localeId];
    while (/_[^_]+$/.test(localeId)) {
        localeId = localeId.replace(/_[^_]+$/, '');
        localeIds.push(localeId);
    }
    return localeIds;
}

function localeDataToStatementAsts(localeData) {
    var propertyNames = Object.keys(localeData),
        statementAsts = propertyNames.map(function (propertyName) {
            return [
                'stat',
                [
                    'assign',
                    true,
                    ['dot', ['name', 'inter'], propertyName],
                    uglifyAst.objToAst(localeData[propertyName])
                ]
            ];
        });
    if (commandLineOptions.golf) {
        uglifyAst.pullCommonStructuresIntoVars(['toplevel', statementAsts]);
    }
    return statementAsts;
}

function getTrimmedInterAst() {
    var interAst = uglifyJs.parser.parse(fs.readFileSync(Path.resolve(__dirname, '../lib/inter.js'), 'utf-8')),
        omitByMethodName = {};
    if (!commandLineOptions.pluralrules) {
        omitByMethodName.trQuantity = true;
    }
    if (!commandLineOptions.listpatterns) {
        omitByMethodName.renderList = true;
    }
    if (!commandLineOptions.dateintervalformats) {
        omitByMethodName.makeDateIntervalRendererFromFormatString = true;
        omitByMethodName.makeDateIntervalRenderer = true;
        omitByMethodName.makeDateIntervalRendererFromGreatestDifferences = true;
    }
    if (!commandLineOptions.dateformats && !commandLineOptions.dateintervalformats) {
        omitByMethodName.tokenizeDateFormat = true;
        omitByMethodName.getCodeFragmentForDateField = true;
        omitByMethodName.getDateFormat = true;
        omitByMethodName.makeDateRenderer = true;
        omitByMethodName.makeDateRendererSource = true;
        omitByMethodName.getBestICUFormatId = true;
        omitByMethodName.adaptICUFormat = true;
    }
    if (!commandLineOptions.numbers && !commandLineOptions.rbnf) {
        omitByMethodName.makeNumberRendererSource = true;
        omitByMethodName.makeNumberRenderer = true;
    }
    if (!commandLineOptions.numbers) {
        omitByMethodName.makeFileSizeRenderer = true;
        omitByMethodName.makePercentageRenderer = true;
    }
    if (!commandLineOptions.unitpatterns) {
        omitByMethodName.makeUnitRenderer = true;
    }

    // These methods are always included (for now):
    //   makePatternRenderer
    //   tokenizePattern

    var factoryStatementAsts = interAst[1][0][1][2][1][3],
        objectLiteralKeyValueAsts = factoryStatementAsts[0][1][0][1][1];
    for (var i = 0 ; i < objectLiteralKeyValueAsts.length ; i += 1) {
        if (omitByMethodName[objectLiteralKeyValueAsts[i][0]]) {
            objectLiteralKeyValueAsts.splice(i, 1);
            i -= 1;
        }
    }
    return interAst;
}

cldr.load(targetLocaleIds, function (err) {
    if (err) {
        throw error;
    }
    var needsCalendarData = optionNamesByType.calendar.some(function (calendarOptionName) {return commandLineOptions[calendarOptionName.toLowerCase()];}),
        calendarIds = commandLineOptions.calendars ? _.flatten(_.flatten([commandLineOptions.calendars]).map(function (calendarId) {
            return calendarId.split(",");
        })) : cldr.calendarIds,
        numberSystemIds = commandLineOptions.numbersystems ? _.flatten(_.flatten([commandLineOptions.numbersystems]).map(function (numberSystemId) {
            return numberSystemId.split(",");
        })) : cldr.numberSystemIds,
        digitsByNumberSystemId = commandLineOptions.numbers && cldr.extractDigitsByNumberSystemId(),
        rbnfTypes = commandLineOptions.rbnf ? ['renderDigitsOrdinal', 'renderSpelloutNumbering'] : [], // FIXME: Review list of defaults
        localeDataByTargetLocaleId = {};

    numberSystemIds.forEach(function (numberSystemId) {
        var digits = digitsByNumberSystemId[numberSystemId];
        if (typeof digits === 'string') {
            rbnfTypes.push(digits);
        }
    });

    targetLocaleIds.forEach(function (targetLocaleId) {
        var localeData = {};
        optionNamesByType.simple.forEach(function (optionName) {
            if (commandLineOptions[optionName.toLowerCase()]) {
                localeData[optionName] = cldr['extract' + optionName.replace(/[a-z]/, function ($0) {return $0.toUpperCase();})](targetLocaleId);
            }
        });
        if (commandLineOptions.numbers) {
            localeData.numbers = {};
            numberSystemIds.forEach(function (numberSystemId) {
                var numberSystem = localeData.numbers[numberSystemId] = {
                    symbols: cldr.extractNumberSymbols(targetLocaleId, numberSystemId),
                    formats: cldr.extractNumberFormats(targetLocaleId, numberSystemId),
                    digits: digitsByNumberSystemId[numberSystemId]
                };
            });
            localeData.defaultNumberSystemId = cldr.extractDefaultNumberSystemId(targetLocaleId);
        }
        if (needsCalendarData) {
            localeData.calendars = {};
            var extractCalendarOptions = {};
            calendarIds.forEach(function (calendarId) {
                var calendar = localeData.calendars[calendarId] = {};
                optionNamesByType.calendar.forEach(function (calendarOptionName) {
                    if (commandLineOptions[calendarOptionName.toLowerCase()]) {
                        var extractMethodName = 'extract' + calendarOptionName.replace(/[a-z]/, function ($0) {return $0.toUpperCase();});
                        if (calendarOptionName === 'dateFormats') {
                            calendar.dateFormats = {basic: {}, cldr: {}};

                            ['date', 'time'].forEach(function (dateOrTime) {
                                var formats = cldr.extractDateOrTimeFormats(targetLocaleId, calendarId, dateOrTime),
                                    dateOrTimeCapitalized = dateOrTime.replace(/^(\w)/, function (ch) {return ch.toUpperCase();});
                                if (formats) {
                                    Object.keys(formats).forEach(function (formatId) {
                                        calendar.dateFormats.basic[formatId + dateOrTimeCapitalized] = formats[formatId];
                                    });
                                }
                            });

                            var dateFormatItems = cldr.extractDateFormatItems(targetLocaleId, calendarId);
                            if (dateFormatItems) {
                                Object.keys(dateFormatItems).forEach(function (dateFormatItemId) {
                                    calendar.dateFormats.cldr[dateFormatItemId] = dateFormatItems[dateFormatItemId];
                                });
                            }

                            var dateTimePatterns = cldr.extractDateTimePatterns(targetLocaleId, calendarId);
                            if (dateTimePatterns) {
                                ['short', 'medium', 'long', 'full'].forEach(function (length) {
                                    var dateTimePattern = dateTimePatterns && dateTimePatterns[length];
                                    if (dateTimePattern) {
                                        calendar.dateFormats.basic[length + 'DateTime'] = dateTimePatterns[length]
                                            .replace(/\{0\}/g, calendar.dateFormats.basic[length + 'Time'])
                                            .replace(/\{1\}/g, calendar.dateFormats.basic[length + 'Date']);
                                    }
                                });
                                calendar.defaultDateTimePattern = dateTimePatterns[cldr.extractDefaultDateTimePatternName(targetLocaleId, calendarId)];
                            }
                            if (calendar.dateFormats.basic.shortDate) {
                                // Inspired by date_parts_order in DateTime::Locale::Base:
                                calendar.datePartsOrder = calendar.dateFormats.basic.shortDate.replace(/[^dmy]/gi, '').toLowerCase().replace(/(\w)\1+/g, "$1");
                            }
                        } else if (cldr[extractMethodName]) {
                            calendar[calendarOptionName] = cldr[extractMethodName](targetLocaleId, calendarId);
                        }
                    }
                });
            });
        }
        if (commandLineOptions.pluralrules) {
            localeData.pluralRule = cldr.extractPluralRuleFunction(targetLocaleId);
        }
        if (rbnfTypes) {
            _.extend(localeData, cldr.extractRbnfFunctionByType(targetLocaleId, rbnfTypes));
        }
        if (commandLineOptions.timezones) {
            var timeZoneDisplayNames = cldr.extractTimeZoneDisplayNames(targetLocaleId);
            // Add the time zones from the zoneinfo database that aren't in the extracted locale data:
            zoneInfo.timeZoneIds.forEach(function (timeZoneId) {
                if (!(timeZoneId in timeZoneDisplayNames)) {
                    timeZoneDisplayNames[timeZoneId] = zoneInfo.timeZoneIdToEnglishDisplayName(timeZoneId);
                }
            });
            localeData.timeZones = Object.keys(timeZoneDisplayNames).filter(function (timeZoneId) {
                return timeZoneId in zoneInfo.utcStandardOffsetSecondsByTimeZoneId && timeZoneId in zoneInfo.territoryIdByTimeZoneId;
            }).map(function (timeZoneId) {
                var utcStandardOffsetSeconds = zoneInfo.utcStandardOffsetSecondsByTimeZoneId[timeZoneId],
                    territoryId = zoneInfo.territoryIdByTimeZoneId[timeZoneId];
                return {
                    id: timeZoneId,
                    regionId: worldInfo.numericRegionIdByTerritoryId[territoryId],
                    utcStandardOffsetSeconds: utcStandardOffsetSeconds,
                    displayName: timeZoneDisplayNames[timeZoneId],
                    countryId: territoryId
                };
            }).sort(function (a, b) {
                return ((typeof b.utcStandardOffsetSeconds === 'number') - (typeof a.utcStandardOffsetSeconds === 'number')) ||
                    a.utcStandardOffsetSeconds - b.utcStandardOffsetSeconds ||
                    (a.displayName < b.displayName ? -1 : (b.displayName < a.displayName ? 1 : 0));
            });
        }
        if (commandLineOptions.territories || commandLineOptions.countries || commandLineOptions.regions)  {
            var territoryDisplayNames = cldr.extractTerritoryDisplayNames(targetLocaleId),
                territories = Object.keys(territoryDisplayNames).sort(function (a, b) {
                    return territoryDisplayNames[a] < territoryDisplayNames[b] ? -1 :
                        (territoryDisplayNames[a] > territoryDisplayNames[b] ? 1 : 0);
                }).map(function (territoryId) {
                    return {
                        id: territoryId,
                        displayName: territoryDisplayNames[territoryId],
                        regionId: worldInfo.numericRegionIdByTerritoryId[territoryId],
                        hasTimeZones: zoneInfo.numTimeZonesByTerritoryId[territoryId] > 0
                    };
                });

            if (commandLineOptions.territories) {
                localeData.territories = territories;
            }
            if (commandLineOptions.regions) {
                localeData.regions = territories.filter(function (territoryInfo) {
                    return /^\d{3}/.test(territoryInfo.id);
                });
            }
            if (commandLineOptions.countries) {
                localeData.countries = territories.filter(function (territoryInfo) {
                    var countryInfo = worldInfo.countryInfoByTerritoryId[territoryInfo.id];
                    return countryInfo && !countryInfo.isHistorical && !countryInfo.isSubdivision;
                });
            }
        }
        if (commandLineOptions.languages) {
            var languageDisplayNames = cldr.extractLanguageDisplayNames(targetLocaleId);
            localeData.languages = Object.keys(languageDisplayNames).filter(function (id) {
                return !commandLineOptions.languagesincludedonly || targetLocaleIds.indexOf(id) !== -1;
            }).map(function (id) {
                return {
                    id: id,
                    displayName: languageDisplayNames[id]
                };
            });
        }
        if (commandLineOptions.scripts) {
            var scriptDisplayNames = cldr.extractScriptDisplayNames(targetLocaleId);
            localeData.scripts = Object.keys(scriptDisplayNames).sort(function (a, b) {
                return scriptDisplayNames[a] < scriptDisplayNames[b] ? -1 :
                    (scriptDisplayNames[a] > scriptDisplayNames[b] ? 1 : 0);
            }).map(function (id) {
                return {
                    id: id,
                    displayName: scriptDisplayNames[id]
                };
            });
        }
        if (commandLineOptions.currencies) {
            var currencyInfoById = cldr.extractCurrencyInfoById(targetLocaleId);
            localeData.currencies = Object.keys(currencyInfoById).sort(function (a, b) {
            return currencyInfoById[a].displayName < currencyInfoById[b].displayName ? -1 :
                (currencyInfoById[a].displayName > currencyInfoById[b].displayName ? 1 : 0);
            }).map(function (currencyId) {
                return currencyInfoById[currencyId];
            });
        }
        localeDataByTargetLocaleId[targetLocaleId] = convertObjectsWithIntegerKeysToArrays(localeData);
    });
    if (commandLineOptions.languagesnative && commandLineOptions.languages) {
        var isSeenByLocaleId = {};
        targetLocaleIds.forEach(function (targetLocaleId) {
            localeDataByTargetLocaleId[targetLocaleId].languages.forEach(function (languageInfo) {
                isSeenByLocaleId[languageInfo.id] = true;
            });
        });
        var nativeDisplayNameByLocaleId = {};
        Object.keys(isSeenByLocaleId).forEach(function (localeId) {
            // FIXME: The needed documents haven't necessarily been loaded beforehand, so they might be readFileSync'ed:
            nativeDisplayNameByLocaleId[localeId] = cldr.extractLanguageDisplayNames(localeId)[localeId];
        });
        targetLocaleIds.forEach(function (targetLocaleId) {
            localeDataByTargetLocaleId[targetLocaleId].languages.forEach(function (languageInfo) {
                var nativeDisplayName = nativeDisplayNameByLocaleId[languageInfo.id];
                if (nativeDisplayName && nativeDisplayName !== languageInfo.displayName) {
                    languageInfo.nativeDisplayName = nativeDisplayName;
                }
            });
        });
    }
    if (commandLineOptions.bundle) {
        var localeIdVarAst = uglifyJs.parser.parse(commandLineOptions.localeidvar)[1][0][1],
            statementAsts = [];

        targetLocaleIds.forEach(function (targetLocaleId) {
            if (Object.keys(localeDataByTargetLocaleId[targetLocaleId]).length > 0) {
                statementAsts.push([
                    'if',
                    ['binary', '===', localeIdVarAst, ['string', normalizeLocaleId(targetLocaleId)]],
                        ['block',
                            localeDataToStatementAsts(localeDataByTargetLocaleId[targetLocaleId])
                        ]
                    ]
                );
            }
        });

        var interAst = getTrimmedInterAst(),
            factoryStatementAsts = interAst[1][0][1][2][1][3];

        Array.prototype.splice.apply(factoryStatementAsts, [factoryStatementAsts.length - 1, 0].concat(statementAsts)); // Inject before "return inter;"

        var javaScriptString = uglifyJs.uglify.gen_code(interAst, {beautify: true});
        if ('o' in commandLineOptions) {
            fs.writeFile(commandLineOptions.o, javaScriptString, 'utf-8', function (err) {
                if (err) {
                    throw err;
                }
            });
        } else {
            console.log(javaScriptString);
        }
    } else {
        // Build one file per locale, interpret commandLineOptions.o as a dir
        seq(targetLocaleIds)
            .parEach(40, function (targetLocaleId) {
                var interAst = getTrimmedInterAst(),
                    factoryStatementAsts = interAst[1][0][1][2][1][3],
                    statementAsts = localeDataToStatementAsts(localeDataByTargetLocaleId[targetLocaleId]);

                Array.prototype.splice.apply(factoryStatementAsts, [factoryStatementAsts.length - 1, 0].concat(statementAsts)); // Inject before "return inter;"

                var javaScriptString = uglifyJs.uglify.gen_code(interAst, {beautify: true});

                fsTools.mkpathAndWriteFile(Path.resolve(commandLineOptions.o, targetLocaleId + '.js'), javaScriptString, 'utf-8', this);
            });
    }
});
