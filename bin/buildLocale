#!/usr/bin/env node

var fs = require('fs'),
    Path = require('path'),
    seq = require('seq'),
    uglifyJs = require('uglify-js'),
    uglifyAst = require('uglifyast'),
    passError = require('passerror'),
    time = require('time'),
    cjson = require('cjson-papandreou'),
    _ = require('underscore'),
    leftPad = require('../lib/leftPad'),
    normalizeLocaleId = require('../lib/normalizeLocaleId'),
    cldr = require('../lib/cldr'),
    resolveAndTrimLocaleData = require('../lib/resolveAndTrimLocaleData'),
    commandLineOptions = require('optimist')
        .usage('$0 [--cldrpath <pathToCldr>] [-o <outputFileName>] --locale localeId,localeId...')
        .options('o', {
            describe: 'Output file name (defaults to STDOUT)'
        })
        .options('cldrpath', {
            default: '/usr/share/cldr',
            describe: 'Path to your CLDR files'
        })
        .options('dateformats', {
            describe: 'Whether to include date and time formats (inter.dateFormats and others)',
            type: 'boolean',
            default: false
        })
        .options('dateintervalformats', {
            describe: 'Whether to include date and time interval formats (inter.dateIntervalFormats)',
            type: 'boolean',
            default: false
        })
        .options('numberformats', {
            describe: 'Whether to include number formats (inter.numberSymbols, inter.getNumberRenderer, inter.getFileSizeRenderer, inter.getPercentageRenderer)',
            type: 'boolean',
            default: false
        })
        .options('delimiters', {
            describe: 'Whether to include quotation delimiters (inter.delimiters)',
            type: 'boolean',
            default: false
        })
        .options('listpatterns', {
            describe: 'Whether to include list formats (inter.listPatterns and inter.renderList)',
            type: 'boolean',
            default: false
        })
        .options('unitpatterns', {
            describe: 'Whether to include unit patterns (inter.unitPatterns and inter.getUnitRenderer)',
            type: 'boolean',
            default: false
        })
        .options('timezoneinfo', {
            describe: 'Whether to include time zone info and display names (inter.timeZoneInfo)',
            type: 'boolean',
            default: false
        })
        .options('countryinfo', {
            describe: 'Whether to include country info and display names (inter.countryInfo)',
            type: 'boolean',
            default: false
        })
        .options('regioninfo', {
            describe: 'Whether to include region info and display names (inter.regionInfo)',
            type: 'boolean',
            default: false
        })
        .options('localeinfo', {
            describe: 'Whether to include locale info and display names (inter.localeInfo)',
            type: 'boolean',
            default: false
        })
        .options('localeinfoincludedonly', {
            describe: 'Modifies --localeinfo to only include information about the locales included in the build. Useful for displaying a list of the supported locales in a web app while keeping down size of the library'
        })
        .options('currencyinfo', {
            describe: 'Whether to include currency info and display names (inter.currencyInfo)',
            type: 'boolean',
            default: false
        })
        .options('pluralrules', {
            describe: 'Whether to include plural rules (inter.getQuantity)',
            type: 'boolean',
            default: false
        })
        .options('exemplarcharacters', {
            describe: 'Whether to include exemplar characters (inter.exemplarCharacters)',
            type: 'boolean',
            default: false
        })
        .options('locale', {
            describe: 'Comma-separated list of locales to build',
            type: 'string',
            demand: true
        })
        .options('localeidvar', {
            describe: 'The name of the JavaScript identifier used to determine which locale to select. If you don\'t use buildDevelopment (AssetGraph-builder) your own code must set this variable before the locale library is loaded.',
            type: 'string',
            default: 'LOCALEID'
        })
        .argv,
    targetLocaleIds = _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");})).map(normalizeLocaleId),
    localeDataByTargetLocaleId = {},
    isTargetLocaleById = {},
    countries = JSON.parse(fs.readFileSync(Path.resolve(__dirname, '../countries.json'))),
    countryInfoByTerritoryId = {},
    numericRegionIdByNumericTerritoryId = {},
    numericRegionIdByTerritoryId = {},
    alpha2CodeByNumericTerritoryId = {};

countries.forEach(function (countryInfo) {
    alpha2CodeByNumericTerritoryId[countryInfo.numericCode] = countryInfo.alpha2Code;
    countryInfoByTerritoryId[countryInfo.alpha2Code] = countryInfo;
});

(function traverseRegions(region, parentId) {
    var id = leftPad(region.id, 3, '0');
    if (parentId) {
        numericRegionIdByNumericTerritoryId[id] = parentId;
        numericRegionIdByTerritoryId[alpha2CodeByNumericTerritoryId[id]] = parentId;
    }
    if (region.children) {
        region.children.forEach(function (child) {
            traverseRegions(child, id);
        });
    }
}(JSON.parse(fs.readFileSync(Path.resolve(__dirname, '../regions.json')))));

targetLocaleIds.forEach(function (targetLocaleId) {
    isTargetLocaleById[targetLocaleId] = true;
});

function zeroPad(str, length) {
    str = String(str);
    while (str.length < length) {
        str = "0" + str;
    }
    return str;
}

var difficultTimeZoneIdToEnglishDisplayName = {
    "Antarctica/DumontDUrville": "Dumont d'Urville",
    "America/St_Thomas": "St. Thomas",
    "America/St_Vincent": "St. Vincent",
    "America/St_Lucia": "St. Lucia",
    "America/St_Johns": "St. John's",
    "America/St_Kitts": "St. Kitts"
};

function timeZoneIdToEnglishDisplayName(timeZoneId) {
    if (timeZoneId in difficultTimeZoneIdToEnglishDisplayName) {
        return difficultTimeZoneIdToEnglishDisplayName[timeZoneId];
    }
    return timeZoneId.split("/").pop().replace(/_/g, ' ');
}

var nextYear = new Date().getFullYear() + 1,
    nextJanuary1st = new time.Date(nextYear, 0, 1),
    nextJuly1st = new time.Date(nextYear, 6, 1),
    territoryIdByTimeZoneId = {},
    numTimeZonesByTerritoryId = {},
    utcStandardOffsetSecondsByTimeZoneId = {},
    timeZoneIds = [];

fs.readFileSync(Path.resolve('/usr/share/zoneinfo/', 'zone.tab'), 'ascii').split(/\r\n?|\n\r?/).forEach(function (line) {
    if (/^#|^\s*$/.test(line)) {
        return;
    }
    var fields = line.split("\t");
    if (fields.length < 3) {
        console.warn('Skipping ' + line, fields);
    }
    var territoryId = fields[0],
        timeZoneId = fields[2];

    // Try instantiating a time.Date object with this time zone.
    // If this throws an exception, node-time's set of time zones is somehow different
    // from /usr/share/zoneinfo/zone.tab:
    new time.Date(nextJanuary1st.getTime(), timeZoneId);

    numTimeZonesByTerritoryId[territoryId] = (numTimeZonesByTerritoryId[territoryId] || 0) + 1;
    territoryIdByTimeZoneId[timeZoneId] = territoryId;
    timeZoneIds.push(timeZoneId);

    time.tzset(timeZoneId);
    var localtimeNextJanuary1st = time.localtime(nextJanuary1st.getTime() / 1000),
        localtimeNextJuly1st = time.localtime(nextJuly1st.getTime() / 1000),
        utcStandardOffsetSeconds;
    if (localtimeNextJanuary1st.isDaylightSavings) {
        utcStandardOffsetSeconds = localtimeNextJuly1st.gmtOffset;
    } else {
        utcStandardOffsetSeconds = localtimeNextJanuary1st.gmtOffset;
    }
    utcStandardOffsetSecondsByTimeZoneId[timeZoneId] = utcStandardOffsetSeconds;
});

var doExtractByLocaleId = {root: true},
    localeDataByLocaleId = {};

function expandLocaleIdToPrioritizedList(localeId) {
    if (!localeId) {
        return [];
    }
    var localeIds = [localeId];
    while (/_[^_]+$/.test(localeId)) {
        localeId = localeId.replace(/_[^_]+$/, '');
        localeIds.push(localeId);
    }
    return localeIds;
}

targetLocaleIds.forEach(function (targetLocaleId) {
    expandLocaleIdToPrioritizedList(targetLocaleId).forEach(function (localeId) {
        doExtractByLocaleId[localeId] = true;
    });
});

var cldrCommonMainXmlFileNameByNormalizedLocaleId = {};

fs.readdirSync(Path.resolve(commandLineOptions.cldrpath, "common", "main")).forEach(function (fileName) {
    var matchFileName = fileName.match(/^(.*)\.xml$/);
    if (matchFileName) {
        cldrCommonMainXmlFileNameByNormalizedLocaleId[normalizeLocaleId(matchFileName[1])] =
            Path.resolve(commandLineOptions.cldrpath, "common", "main", fileName);
    }
});

seq(Object.keys(doExtractByLocaleId))
    .parEach(function (localeId) {
        var cb = this,
            cldrCommonMainXmlFileName = cldrCommonMainXmlFileNameByNormalizedLocaleId[normalizeLocaleId(localeId)];
        if (!cldrCommonMainXmlFileName) {
            throw new Error('Cannot find xml file for ' + localeId + ' in ' + commandLineOptions.cldrpath);
        }
        fs.readFile(cldrCommonMainXmlFileName, 'utf-8', passError(cb, function (xmlString) {
            localeDataByLocaleId[localeId] = cldr.extractLocaleDataFromXmlString(xmlString);
            cb();
        }));
    })
    .seq(function () {
        var cb = this;

        if (commandLineOptions.pluralrules) {
            fs.readFile(Path.resolve(commandLineOptions.cldrpath, 'common', 'supplemental', 'plurals.xml'), 'utf-8', passError(cb, function (xmlString) {
                var getQuantityMethodAstByLocaleId = cldr.generateGetQuantityMethodAstsFromXmlString(xmlString, Object.keys(doExtractByLocaleId));
                Object.keys(doExtractByLocaleId).forEach(function (localeId) {
                    localeDataByLocaleId[localeId].getQuantity = getQuantityMethodAstByLocaleId[localeId];
                });
                cb();
            }));
        } else {
            cb();
        }
    })
    .seq(function () {
        timeZoneIds.forEach(function (timeZoneId) {
            localeDataByLocaleId.root.timeZoneDisplayNames = localeDataByLocaleId.root.timeZoneDisplayNames || {};
            if (!(timeZoneId in localeDataByLocaleId.root.timeZoneDisplayNames)) {
                localeDataByLocaleId.root.timeZoneDisplayNames[timeZoneId] = timeZoneIdToEnglishDisplayName(timeZoneId);
            }
        });

        // Gotcha: Only includes the locale ids we're extracting data for
        var nativeDisplayNameByLocaleId = {};
        targetLocaleIds.forEach(function (targetLocaleId) {
            nativeDisplayNameByLocaleId[targetLocaleId] = localeDataByLocaleId[targetLocaleId].localeDisplayNames[targetLocaleId];
        });

        var resolveAndTrimLocaleDataOptions = {
            targetLocaleIds: targetLocaleIds,
            countryInfoByTerritoryId: countryInfoByTerritoryId,
            utcStandardOffsetSecondsByTimeZoneId: utcStandardOffsetSecondsByTimeZoneId,
            territoryIdByTimeZoneId: territoryIdByTimeZoneId,
            numericRegionIdByTerritoryId: numericRegionIdByTerritoryId,
            numTimeZonesByTerritoryId: numTimeZonesByTerritoryId,
            nativeDisplayNameByLocaleId: nativeDisplayNameByLocaleId
        };
        resolveAndTrimLocaleData.availableOptionNames.forEach(function (availableOptionName) {
            resolveAndTrimLocaleDataOptions[availableOptionName] = commandLineOptions[availableOptionName.toLowerCase()];
        });

        targetLocaleIds.forEach(function (targetLocaleId) {
            var localeDatasInPrioritizedOrder = expandLocaleIdToPrioritizedList(targetLocaleId).concat(['root']).map(function (localeId) {
                return localeDataByLocaleId[localeId];
            });

            var localeData = cjson.extend.apply(cjson, [true, {}].concat(localeDatasInPrioritizedOrder.reverse()));
            localeDataByTargetLocaleId[targetLocaleId] = resolveAndTrimLocaleData(localeData, resolveAndTrimLocaleDataOptions);
        });

        var localeIdVarAst = uglifyJs.parser.parse(commandLineOptions.localeidvar)[1][0][1],
            statementAsts = [];
        targetLocaleIds.forEach(function (targetLocaleId) {
            statementAsts.push(['if',
                                ['binary', '===', localeIdVarAst, ['string', normalizeLocaleId(targetLocaleId)]],
                                ['block',
                                    Object.keys(localeDataByTargetLocaleId[targetLocaleId]).map(function (propertyName) {
                                        return ['stat',
                                            ['assign', true, ['dot', ['name', 'inter'], propertyName], uglifyAst.objToAst(localeDataByTargetLocaleId[targetLocaleId][propertyName])]
                                        ];
                                    })
                                ]
                               ]);
        });

        var omitByMethodName = {};
        if (!commandLineOptions.pluralrules) {
            omitByMethodName.trQuantity = true;
        }
        if (!commandLineOptions.listpatterns) {
            omitByMethodName.renderList = true;
        }
        if (!commandLineOptions.dateintervalformats) {
            omitByMethodName.makeDateIntervalRendererFromFormatString = true;
            omitByMethodName.makeDateIntervalRenderer = true;
            omitByMethodName.makeDateIntervalRendererFromGreatestDifferences = true;
        }
        if (!commandLineOptions.dateformats && !commandLineOptions.dateintervalformats) {
            omitByMethodName.tokenizeDateFormat = true;
            omitByMethodName.getCodeFragmentForDateField = true;
            omitByMethodName.getDateFormat = true;
            omitByMethodName.makeDateRenderer = true;
            omitByMethodName.makeDateRendererSource = true;
            omitByMethodName.getBestICUFormatId = true;
            omitByMethodName.adaptICUFormat = true;
        }
        if (!commandLineOptions.numberformats) {
            omitByMethodName.makeNumberRendererSource = true;
            omitByMethodName.makeNumberRenderer = true;
            omitByMethodName.makeFileSizeRenderer = true;
            omitByMethodName.makePercentageRenderer = true;
        }
        if (!commandLineOptions.unitpatterns) {
            omitByMethodName.makeUnitRenderer = true;
        }

        // These methods are always included (for now):
        //   makePatternRenderer
        //   tokenizePattern

        var interAst = uglifyJs.parser.parse(fs.readFileSync(Path.resolve(__dirname, '../lib/inter.js'), 'utf-8')),
            objectLiteralKeyValues = interAst[1][0][1][3][1];
        for (var i = 0 ; i < objectLiteralKeyValues.length ; i += 1) {
            if (omitByMethodName[objectLiteralKeyValues[i][0]]) {
                objectLiteralKeyValues.splice(i, 1);
                i -= 1;
            }
        }

        var javaScriptString = uglifyJs.uglify.gen_code(['toplevel', interAst[1].concat(statementAsts)], {beautify: true});
        if ('o' in commandLineOptions) {
            fs.writeFile(commandLineOptions.o, javaScriptString, 'utf-8', this);
        } else {
            console.log(javaScriptString);
            this();
        }
    });
