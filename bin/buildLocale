#!/usr/bin/env node

var fs = require('fs'),
    Path = require('path'),
    seq = require('seq'),
    uglifyJs = require('uglify-js'),
    uglifyAst = require('uglifyast'),
    passError = require('passerror'),
    _ = require('underscore'),
    fsTools = require('../lib/fsTools'),
    leftPad = require('../lib/leftPad'),
    normalizeLocaleId = require('../lib/normalizeLocaleId'),
    Cldr = require('../lib/Cldr'),
    ZoneInfo = require('../lib/ZoneInfo'),
    optimist = require('optimist')
        .usage('$0 [--cldrpath <pathToCldr>] [-o <outputFileName>] --locale localeId,localeId...')
        .options('cldrpath', {
            default: '/usr/share/cldr',
            describe: 'Path to your CLDR files'
        })
        .options('zoneinfopath', {
            default: '/usr/share/zoneinfo',
            describe: 'Path to your zoneinfo database'
        })
        .options('o', {
            describe: 'Output directory (or output file if --onefile is specified)'
        })
        .options('locales', {
            describe: 'Comma-separated list of locales to build',
            type: 'string'
        })
        .options('bundle', {
            default: false,
            describe: 'Generate one bundle with all locale data in it (see also --localeidvar). The default is to generate one file per locale'
        })
        .check(function (argv) {
            if (!argv.bundle && !argv.o) {
                throw new Error('-o is mandatory unless --bundle is specified');
            }
        })
        .options('localeidvar', {
            describe: 'The name of the JavaScript identifier used to determine which locale to select (only applicable with --bundle). If you don\'t use buildDevelopment (AssetGraph-builder) your own code must set this variable before the locale library is loaded',
            type: 'string',
            default: 'LOCALEID'
        })
        .options('calendars', {
            describe: 'Comma-separated list of calendars to include (defaults to all available)',
            type: 'string'
        })
        .options('languagesincludedonly', {
            describe: 'Modifies --languages to only include information about the locales included in the build. Useful for displaying a list of the supported locales in a web app while keeping down size of the library'
        });

var descriptionByOptionName = {
    dateFormats: 'date and time formats (inter.dateFormats and others, implied by --dateintervalformats)',
    dateIntervalFormats: 'date and time interval formats (inter.dateIntervalFormats)',
    dayNames: 'day names (inter.calendars[calendarId].dayNames). Implied by --dateformats and --dateintervalformats',
    dayPeriods: 'day periods (inter.calendars[calendarId].dayPeriods). Implied by --dateformats and --dateintervalformats',
    cyclicNames: 'cyclic names (inter.calendars[calendarId].cyclicNames). Implied by --dateformats and --dateintervalformats',
    monthNames: 'month names (inter.calendars[calendarId].monthNames). Implied by --dateformats and --dateintervalformats',
    monthPatterns: 'month patterns (inter.calendars[calendarId].monthPatterns). Implied by --dateformats and --dateintervalformats',
    eraNames: 'era names (inter.calendars[calendarId].eraNames). Implied by --dateformats and --dateintervalformats',
    quarterNames: 'quarter names (inter.calendars[calendarId].quarterNames). Implied by --dateformats and --dateintervalformats',
    fields: 'field display names (inter.calendars[calendarId].fields)',
    numbers: 'number formats and symbols (inter.numbers, inter.getNumberRenderer, inter.getFileSizeRenderer, inter.getPercentageRenderer)',
    delimiters: 'quotation delimiters (inter.delimiters)',
    listPatterns: 'list patterns (inter.listPatterns and inter.renderList)',
    unitPatterns: 'unit patterns (inter.unitPatterns and inter.getUnitRenderer)',
    timeZones: 'time zone info and display names (inter.timeZones)',
    territories: 'territory info and display names (inter.territories)',
    countries: 'country info and display names (inter.countries, subset of inter.territories)',
    regions: 'region info and display names (inter.regions, subset of inter.territories)',
    languages: 'language info and display names (inter.languages)',
    currencies: 'currency info and display names (inter.currencies)',
    scripts: 'script display names (inter.scripts)',
    pluralRules: 'plural rules (inter.getQuantity)',
    characters: 'characters (inter.exemplarCharacters, inter.ellipsis)',
    rbnf: 'rbnf rules (inter.renderDigitsOrdinal, inter.renderSpelloutNumbering...)'
};

var optionNames = Object.keys(descriptionByOptionName);
optionNames.forEach(function (optionName) {
    optimist = optimist.options(optionName.toLowerCase(), {
        describe: 'Whether to include ' + descriptionByOptionName[optionName],
        type: 'boolean',
        default: false
    });
});

optimist = optimist.options('all', {
    describe: 'Extract all data (equivalent to ' + optionNames.map(function (optionName) {
        return '--' + optionName.toLowerCase();
    }).join(' ') + ')',
    type: 'boolean',
    default: false
});

var commandLineOptions = optimist.argv;

if (commandLineOptions.all) {
    optionNames.forEach(function (optionName) {
        commandLineOptions[optionName.toLowerCase()] = true;
    });
}


var cldr = new Cldr(commandLineOptions.cldrpath),
    zoneInfo = new ZoneInfo(commandLineOptions.zoneinfopath),
    worldInfo = require('../lib/worldInfo'),
    targetLocaleIds,
    localeDataByTargetLocaleId = {},
    isTargetLocaleById = {};

if (commandLineOptions.locales) {
    targetLocaleIds = _.flatten(_.flatten([commandLineOptions.locales]).map(function (localeId) {return localeId.split(",");})).map(normalizeLocaleId);
} else {
    targetLocaleIds = cldr.localeIds;
}

targetLocaleIds.forEach(function (targetLocaleId) {
    isTargetLocaleById[targetLocaleId] = true;
});

function zeroPad(str, length) {
    str = String(str);
    while (str.length < length) {
        str = "0" + str;
    }
    return str;
}

var doExtractByLocaleId = {root: true};

function expandLocaleIdToPrioritizedList(localeId) {
    if (!localeId) {
        return [];
    }
    var localeIds = [localeId];
    while (/_[^_]+$/.test(localeId)) {
        localeId = localeId.replace(/_[^_]+$/, '');
        localeIds.push(localeId);
    }
    return localeIds;
}

targetLocaleIds.forEach(function (targetLocaleId) {
    expandLocaleIdToPrioritizedList(targetLocaleId).forEach(function (localeId) {
        doExtractByLocaleId[localeId] = true;
    });
});

function localeDataToStatementAsts(localeData) {
    var statementAsts = [],
        propertyNames = Object.keys(localeData);

    return propertyNames.map(function (propertyName) {
        return [
            'stat',
            [
                'assign',
                true,
                ['dot', ['name', 'inter'], propertyName],
                uglifyAst.objToAst(localeData[propertyName])
            ]
        ];
    });
}

function getTrimmedInterAst() {
    var interAst = uglifyJs.parser.parse(fs.readFileSync(Path.resolve(__dirname, '../lib/inter.js'), 'utf-8')),
        omitByMethodName = {};
    if (!commandLineOptions.pluralrules) {
        omitByMethodName.trQuantity = true;
    }
    if (!commandLineOptions.listpatterns) {
        omitByMethodName.renderList = true;
    }
    if (!commandLineOptions.dateintervalformats) {
        omitByMethodName.makeDateIntervalRendererFromFormatString = true;
        omitByMethodName.makeDateIntervalRenderer = true;
        omitByMethodName.makeDateIntervalRendererFromGreatestDifferences = true;
    }
    if (!commandLineOptions.dateformats && !commandLineOptions.dateintervalformats) {
        omitByMethodName.tokenizeDateFormat = true;
        omitByMethodName.getCodeFragmentForDateField = true;
        omitByMethodName.getDateFormat = true;
        omitByMethodName.makeDateRenderer = true;
        omitByMethodName.makeDateRendererSource = true;
        omitByMethodName.getBestICUFormatId = true;
        omitByMethodName.adaptICUFormat = true;
    }
    if (!commandLineOptions.numbers && !commandLineOptions.rbnf) {
        omitByMethodName.makeNumberRendererSource = true;
        omitByMethodName.makeNumberRenderer = true;
    }
    if (!commandLineOptions.numbers) {
        omitByMethodName.makeFileSizeRenderer = true;
        omitByMethodName.makePercentageRenderer = true;
    }
    if (!commandLineOptions.unitpatterns) {
        omitByMethodName.makeUnitRenderer = true;
    }

    // These methods are always included (for now):
    //   makePatternRenderer
    //   tokenizePattern

    var factoryStatementAsts = interAst[1][0][1][2][1][3],
        objectLiteralKeyValueAsts = factoryStatementAsts[0][1][0][1][1];
    for (var i = 0 ; i < objectLiteralKeyValueAsts.length ; i += 1) {
        if (omitByMethodName[objectLiteralKeyValueAsts[i][0]]) {
            objectLiteralKeyValueAsts.splice(i, 1);
            i -= 1;
        }
    }
    return interAst;
}

var getLocaleDataOptions = {zoneInfo: zoneInfo, worldInfo: worldInfo};
optionNames.forEach(function (optionName) {
    getLocaleDataOptions[optionName] = commandLineOptions[optionName.toLowerCase()];
});

if (commandLineOptions.calendars) {
    getLocaleDataOptions.calendars = _.flatten(_.flatten([commandLineOptions.calendars]).map(function (calendarId) {return calendarId.split(",");}));
}

seq(targetLocaleIds)
    .parEach(20, function (localeId) {
        var cb = this;
        cldr.extractDataForLocale(_.extend({localeId: localeId}, getLocaleDataOptions), passError(cb, function (localeData) {
            localeDataByTargetLocaleId[localeId] = localeData;

            if (commandLineOptions.languagesincludedonly) {
                localeData.languages = localeData.languages.filter(function (languageInfo) {
                    return targetLocaleIds.indexOf(languageInfo.id) !== -1;
                });
            }
            cb();
        }));
    })
    .seq(function () {
        /*
        targetLocaleIds.forEach(function (targetLocaleId) {
            var timeZoneDisplayNames = localeDataByTargetLocaleId[targetLocaleId].timeZoneDisplayNames;
            timeZoneIds.forEach(function (timeZoneId) {
                if (!(timeZoneId in timeZoneDisplayNames)) {
                    timeZoneDisplayNames[timeZoneId] = zoneInfo.timeZoneIdToEnglishDisplayName(timeZoneId);
                }
            });
        });
        */

        // Add nativeDisplayName property to all languages in all locales (when it differs from the displayName):
        if (commandLineOptions.languages) {
            // Gotcha: Only includes the locales we're extracting data for
            var nativeLanguageDisplayNameById = {};
            targetLocaleIds.forEach(function (targetLocaleId) {
                localeDataByTargetLocaleId[targetLocaleId].languages.some(function (languageInfo) {
                    if (languageInfo.id === targetLocaleId) {
                        nativeLanguageDisplayNameById[targetLocaleId] = displayName;
                        return true; // Break
                    }
                });
                nativeDisplayNameByLocaleId[targetLocaleId] = localeDataByTargetLocaleId[targetLocaleId].localeDisplayNames[targetLocaleId];
            });
            targetLocaleIds.forEach(function (targetLocaleId) {
                localeDataByTargetLocaleId[targetLocaleId].languages.forEach(function (languageInfo) {
                    var nativeDisplayName = nativeLanguageDisplayNameById[languageInfo.id];
                    if (nativeDisplayName && languageInfo.displayName !== nativeDisplayName) {
                        languageInfo.nativeDisplayName = nativeDisplayName;
                    }
                });
            });
        }

        if (commandLineOptions.bundle) {
            var localeIdVarAst = uglifyJs.parser.parse(commandLineOptions.localeidvar)[1][0][1],
                statementAsts = [];

            targetLocaleIds.forEach(function (targetLocaleId) {
                if (Object.keys(localeDataByTargetLocaleId[targetLocaleId]).length > 0) {
                    statementAsts.push([
                        'if',
                        ['binary', '===', localeIdVarAst, ['string', normalizeLocaleId(targetLocaleId)]],
                            ['block',
                                localeDataToStatementAsts(localeDataByTargetLocaleId[targetLocaleId])
                            ]
                        ]
                    );
                }
            });

            var interAst = getTrimmedInterAst(),
                factoryStatementAsts = interAst[1][0][1][2][1][3];

            Array.prototype.splice.apply(factoryStatementAsts, [factoryStatementAsts.length - 1, 0].concat(statementAsts)); // Inject before "return inter;"

            var javaScriptString = uglifyJs.uglify.gen_code(interAst, {beautify: true});
            if ('o' in commandLineOptions) {
                fs.writeFile(commandLineOptions.o, javaScriptString, 'utf-8', function (err) {
                    if (err) {
                        throw err;
                    }
                });
            } else {
                console.log(javaScriptString);
            }
        } else {
            // Build one file per locale, interpret commandLineOptions.o as a dir
            seq(targetLocaleIds)
                .parEach(40, function (targetLocaleId) {
                    var interAst = getTrimmedInterAst(),
                        factoryStatementAsts = interAst[1][0][1][2][1][3],
                        statementAsts = localeDataToStatementAsts(localeDataByTargetLocaleId[targetLocaleId]);

                    Array.prototype.splice.apply(factoryStatementAsts, [factoryStatementAsts.length - 1, 0].concat(statementAsts)); // Inject before "return inter;"

                    var javaScriptString = uglifyJs.uglify.gen_code(interAst, {beautify: true});

                    fsTools.mkpathAndWriteFile(Path.resolve(commandLineOptions.o, targetLocaleId + '.js'), javaScriptString, 'utf-8', this);
                });
        }
    });
