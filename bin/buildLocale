#!/usr/bin/env node

var fs = require('fs'),
    Path = require('path'),
    seq = require('seq'),
    uglifyJs = require('uglify-js'),
    uglifyAst = require('uglifyast'),
    passError = require('passerror'),
    time = require('time'),
    cjson = require('cjson-papandreou'),
    _ = require('underscore'),
    leftPad = require('../lib/leftPad'),
    normalizeLocaleId = require('../lib/normalizeLocaleId'),
    cldr = require('../lib/cldr'),
    commandLineOptions = require('optimist')
        .usage('$0 [--cldrpath <pathToCldr>] [-o <outputFileName>] --locale localeId,localeId...')
        .options('o', {
            describe: 'Output file name (defaults to STDOUT)'
        })
        .options('cldrpath', {
            default: '/usr/share/cldr',
            describe: 'Path to your CLDR files'
        })
        .options('dateformats', {
            describe: 'Whether to include date and time formats (inter.dateFormats and others)',
            type: 'boolean',
            default: false
        })
        .options('dateintervalformats', {
            describe: 'Whether to include date and time interval formats (inter.dateIntervalFormats)',
            type: 'boolean',
            default: false
        })
        .options('numberformats', {
            describe: 'Whether to include number formats (inter.numberSymbols, inter.getNumberRenderer, inter.getFileSizeRenderer, inter.getPercentageRenderer)',
            type: 'boolean',
            default: false
        })
        .options('delimiters', {
            describe: 'Whether to include quotation delimiters (inter.delimiters)',
            type: 'boolean',
            default: false
        })
        .options('listpatterns', {
            describe: 'Whether to include list formats (inter.listPatterns and inter.renderList)',
            type: 'boolean',
            default: false
        })
        .options('unitpatterns', {
            describe: 'Whether to include unit patterns (inter.unitPatterns and inter.getUnitRenderer)',
            type: 'boolean',
            default: false
        })
        .options('timezoneinfo', {
            describe: 'Whether to include time zone info and display names (inter.timeZoneInfo)',
            type: 'boolean',
            default: false
        })
        .options('countryinfo', {
            describe: 'Whether to include country info and display names (inter.countryInfo)',
            type: 'boolean',
            default: false
        })
        .options('regioninfo', {
            describe: 'Whether to include region info and display names (inter.regionInfo)',
            type: 'boolean',
            default: false
        })
        .options('localeinfo', {
            describe: 'Whether to include locale info and display names (inter.localeInfo)',
            type: 'boolean',
            default: false
        })
        .options('localeinfoincludedonly', {
            describe: 'Modifies --localeinfo to only include information about the locales included in the build. Useful for displaying a list of the supported locales in a web app while keeping down size of the library'
        })
        .options('currencyinfo', {
            describe: 'Whether to include currency info and display names (inter.currencyInfo)',
            type: 'boolean',
            default: false
        })
        .options('pluralrules', {
            describe: 'Whether to include plural rules (inter.getQuantity)',
            type: 'boolean',
            default: false
        })
        .options('exemplarcharacters', {
            describe: 'Whether to include exemplar characters (inter.exemplarCharacters)',
            type: 'boolean',
            default: false
        })
        .options('locale', {
            describe: 'Comma-separated list of locales to build',
            type: 'string',
            demand: true
        })
        .options('localeidvar', {
            describe: 'The name of the JavaScript identifier used to determine which locale to select. If you don\'t use buildDevelopment (AssetGraph-builder) your own code must set this variable before the locale library is loaded.',
            type: 'string',
            default: 'LOCALEID'
        })
        .argv,
    targetLocaleIds = _.flatten(_.flatten([commandLineOptions.locale]).map(function (localeId) {return localeId.split(",");})).map(normalizeLocaleId),
    localeDataByTargetLocaleId = {},
    isTargetLocaleById = {},
    countries = JSON.parse(fs.readFileSync(Path.resolve(__dirname, '../countries.json'))),
    countryInfoByTerritoryId = {},
    numericRegionIdByNumericTerritoryId = {},
    numericRegionIdByTerritoryId = {},
    alpha2CodeByNumericTerritoryId = {};

countries.forEach(function (countryInfo) {
    alpha2CodeByNumericTerritoryId[countryInfo.numericCode] = countryInfo.alpha2Code;
    countryInfoByTerritoryId[countryInfo.alpha2Code] = countryInfo;
});

(function traverseRegions(region, parentId) {
    var id = leftPad(region.id, 3, '0');
    if (parentId) {
        numericRegionIdByNumericTerritoryId[id] = parentId;
        numericRegionIdByTerritoryId[alpha2CodeByNumericTerritoryId[id]] = parentId;
    }
    if (region.children) {
        region.children.forEach(function (child) {
            traverseRegions(child, id);
        });
    }
}(JSON.parse(fs.readFileSync(Path.resolve(__dirname, '../regions.json')))));

targetLocaleIds.forEach(function (targetLocaleId) {
    isTargetLocaleById[targetLocaleId] = true;
});

function zeroPad(str, length) {
    str = String(str);
    while (str.length < length) {
        str = "0" + str;
    }
    return str;
}

var difficultTimeZoneIdToEnglishDisplayName = {
    "Antarctica/DumontDUrville": "Dumont d'Urville",
    "America/St_Thomas": "St. Thomas",
    "America/St_Vincent": "St. Vincent",
    "America/St_Lucia": "St. Lucia",
    "America/St_Johns": "St. John's",
    "America/St_Kitts": "St. Kitts"
};

function timeZoneIdToEnglishDisplayName(timeZoneId) {
    if (timeZoneId in difficultTimeZoneIdToEnglishDisplayName) {
        return difficultTimeZoneIdToEnglishDisplayName[timeZoneId];
    }
    return timeZoneId.split("/").pop().replace(/_/g, ' ');
}

var nextYear = new Date().getFullYear() + 1,
    nextJanuary1st = new time.Date(nextYear, 0, 1),
    nextJuly1st = new time.Date(nextYear, 6, 1),
    territoryIdByTimeZoneId = {},
    numTimeZonesByTerritoryId = {},
    utcStandardOffsetSecondsByTimeZoneId = {},
    timeZoneIds = [];

fs.readFileSync(Path.resolve('/usr/share/zoneinfo/', 'zone.tab'), 'ascii').split(/\r\n?|\n\r?/).forEach(function (line) {
    if (/^#|^\s*$/.test(line)) {
        return;
    }
    var fields = line.split("\t");
    if (fields.length < 3) {
        console.warn('Skipping ' + line, fields);
    }
    var territoryId = fields[0],
        timeZoneId = fields[2];

    // Try instantiating a time.Date object with this time zone.
    // If this throws an exception, node-time's set of time zones is somehow different
    // from /usr/share/zoneinfo/zone.tab:
    new time.Date(nextJanuary1st.getTime(), timeZoneId);

    numTimeZonesByTerritoryId[territoryId] = (numTimeZonesByTerritoryId[territoryId] || 0) + 1;
    territoryIdByTimeZoneId[timeZoneId] = territoryId;
    timeZoneIds.push(timeZoneId);

    time.tzset(timeZoneId);
    var localtimeNextJanuary1st = time.localtime(nextJanuary1st.getTime() / 1000),
        localtimeNextJuly1st = time.localtime(nextJuly1st.getTime() / 1000),
        utcStandardOffsetSeconds;
    if (localtimeNextJanuary1st.isDaylightSavings) {
        utcStandardOffsetSeconds = localtimeNextJuly1st.gmtOffset;
    } else {
        utcStandardOffsetSeconds = localtimeNextJanuary1st.gmtOffset;
    }
    utcStandardOffsetSecondsByTimeZoneId[timeZoneId] = utcStandardOffsetSeconds;
});

var doExtractByLocaleId = {root: true},
    localeDataByLocaleId = {};

function expandLocaleIdToPrioritizedList(localeId) {
    if (!localeId) {
        return [];
    }
    var localeIds = [localeId];
    while (/_[^_]+$/.test(localeId)) {
        localeId = localeId.replace(/_[^_]+$/, '');
        localeIds.push(localeId);
    }
    return localeIds;
}

targetLocaleIds.forEach(function (targetLocaleId) {
    expandLocaleIdToPrioritizedList(targetLocaleId).forEach(function (localeId) {
        doExtractByLocaleId[localeId] = true;
    });
});

var cldrCommonMainXmlFileNameByNormalizedLocaleId = {};

fs.readdirSync(Path.resolve(commandLineOptions.cldrpath, "common", "main")).forEach(function (fileName) {
    var matchFileName = fileName.match(/^(.*)\.xml$/);
    if (matchFileName) {
        cldrCommonMainXmlFileNameByNormalizedLocaleId[normalizeLocaleId(matchFileName[1])] =
            Path.resolve(commandLineOptions.cldrpath, "common", "main", fileName);
    }
});

seq(Object.keys(doExtractByLocaleId))
    .parEach(function (localeId) {
        var cb = this,
            cldrCommonMainXmlFileName = cldrCommonMainXmlFileNameByNormalizedLocaleId[normalizeLocaleId(localeId)];
        if (!cldrCommonMainXmlFileName) {
            throw new Error('Cannot find xml file for ' + localeId + ' in ' + commandLineOptions.cldrpath);
        }
        fs.readFile(cldrCommonMainXmlFileName, 'utf-8', passError(cb, function (xmlString) {
            localeDataByLocaleId[localeId] = cldr.extractLocaleDataFromXmlString(xmlString);
            cb();
        }));
    })
    .seq(function () {
        var cb = this;

        if (commandLineOptions.pluralrules) {
            fs.readFile(Path.resolve(commandLineOptions.cldrpath, 'common', 'supplemental', 'plurals.xml'), 'utf-8', passError(cb, function (xmlString) {
                var getQuantityMethodAstByLocaleId = cldr.generateGetQuantityMethodAstsFromXmlString(xmlString, Object.keys(doExtractByLocaleId));
                Object.keys(doExtractByLocaleId).forEach(function (localeId) {
                    localeDataByLocaleId[localeId].getQuantity = getQuantityMethodAstByLocaleId[localeId];
                });
                cb();
            }));
        } else {
            cb();
        }
    })
    .seq(function () {
        timeZoneIds.forEach(function (timeZoneId) {
            localeDataByLocaleId.root.timeZoneDisplayNames = localeDataByLocaleId.root.timeZoneDisplayNames || {};
            if (!(timeZoneId in localeDataByLocaleId.root.timeZoneDisplayNames)) {
                localeDataByLocaleId.root.timeZoneDisplayNames[timeZoneId] = timeZoneIdToEnglishDisplayName(timeZoneId);
            }
        });
        targetLocaleIds.forEach(function (targetLocaleId) {
            var localeDatasInPrioritizedOrder = expandLocaleIdToPrioritizedList(targetLocaleId).concat(['root']).map(function (localeId) {
                return localeDataByLocaleId[localeId];
            });

            var localeData = cjson.extend.apply(cjson, [true, {}].concat(localeDatasInPrioritizedOrder.reverse()));

            // Convert localeData.(day|Month)Names.<context>.<width> from objects to arrays:
            ['day', 'month'].forEach(function (dayOrMonth) {
                if ((dayOrMonth + 'Names') in localeData) {
                    Object.keys(localeData[dayOrMonth + 'Names']).forEach(function (context) {
                        Object.keys(localeData[dayOrMonth + 'Names'][context]).forEach(function (width) {
                            var dayOrMonthArray = new Array(dayOrMonth === 'day' ? 7 : 12);
                            Object.keys(localeData[dayOrMonth + 'Names'][context][width]).forEach(function (dayOrMonthNoStr) {
                                dayOrMonthArray[parseInt(dayOrMonthNoStr, 10)] = localeData[dayOrMonth + 'Names'][context][width][dayOrMonthNoStr];
                            });
                            localeData[dayOrMonth + 'Names'][context][width] = dayOrMonthArray;
                            // Convert undefined to null so UglifyJS doesn't barf (some versions of CLDR are buggy):
                            for (var i = 0 ; i < dayOrMonthArray.length ; i += 1) {
                                localeData[dayOrMonth + 'Names'][context][width][i] = localeData[dayOrMonth + 'Names'][context][width][i] || null;
                            }
                        });
                    });
                }
            });

            if (commandLineOptions.localeinfo && localeData.localeDisplayNames) {
                localeData.localeInfo = Object.keys(localeData.localeDisplayNames).filter(function (localeId) {
                    return !commandLineOptions.localeinfoincludedonly || isTargetLocaleById[localeId];
                }).map(function (localeId) {
                    var nativeDisplayName = localeDataByLocaleId[localeId] && localeDataByLocaleId[localeId].localeDisplayNames[localeId],
                        displayName = localeData.localeDisplayNames[localeId],
                        obj = {
                            id: localeId,
                            displayName: displayName
                        };
                    if (nativeDisplayName && nativeDisplayName !== displayName) {
                        obj.nativeDisplayName = nativeDisplayName;
                    }
                    return obj;
                });
            }
            delete localeData.localeDisplayNames;

            if (commandLineOptions.timezoneinfo && localeData.timeZoneDisplayNames) {
                localeData.timeZoneInfo = Object.keys(localeData.timeZoneDisplayNames).filter(function (timeZoneId) {
                    return timeZoneId in utcStandardOffsetSecondsByTimeZoneId && timeZoneId in territoryIdByTimeZoneId;
                }).map(function (timeZoneId) {
                    var utcStandardOffsetSeconds = utcStandardOffsetSecondsByTimeZoneId[timeZoneId],
                        territoryId = territoryIdByTimeZoneId[timeZoneId];
                    return {
                        id: timeZoneId,
                        regionId: numericRegionIdByTerritoryId[territoryId] || null,
                        utcStandardOffsetSeconds: utcStandardOffsetSeconds,
                        displayName: localeData.timeZoneDisplayNames[timeZoneId],
                        countryId: territoryId
                    };
                }).sort(function (a, b) {
                    return ((typeof b.utcStandardOffsetSeconds === 'number') - (typeof a.utcStandardOffsetSeconds === 'number')) ||
                        a.utcStandardOffsetSeconds - b.utcStandardOffsetSeconds ||
                        (a.displayName < b.displayName ? -1 : (b.displayName < a.displayName ? 1 : 0));
                });
            }
            delete localeData.timeZoneDisplayNames;

            if (commandLineOptions.countryinfo && localeData.territoryDisplayNames) {
                localeData.countryInfo = Object.keys(localeData.territoryDisplayNames).sort().filter(function (territoryId) {
                    var countryInfo = countryInfoByTerritoryId[territoryId];
                    return countryInfo && !countryInfo.isHistorical && !countryInfo.isSubdivision;
                }).sort(function (a, b) {
                    return localeData.territoryDisplayNames[a] < localeData.territoryDisplayNames[b] ? -1 :
                        (localeData.territoryDisplayNames[a] > localeData.territoryDisplayNames[b] ? 1 : 0);
                }).map(function (territoryId) {
                    return {
                        id: territoryId,
                        regionId: numericRegionIdByTerritoryId[territoryId] || null,
                        displayName: localeData.territoryDisplayNames[territoryId],
                        hasTimeZones: numTimeZonesByTerritoryId[territoryId] > 0
                    };
                });
            }

            if (commandLineOptions.regioninfo && localeData.territoryDisplayNames) {
                localeData.regionInfo = Object.keys(localeData.territoryDisplayNames).filter(function (territoryId) {
                    return /^\d{3}/.test(territoryId);
                }).sort(function (a, b) {
                    return localeData.territoryDisplayNames[a] < localeData.territoryDisplayNames[b] ? -1 :
                        (localeData.territoryDisplayNames[a] > localeData.territoryDisplayNames[b] ? 1 : 0);
                }).map(function (territoryId) {
                    return {
                        id: territoryId,
                        displayName: localeData.territoryDisplayNames[territoryId]
                    };
                });
            }
            delete localeData.territoryDisplayNames;

            if (commandLineOptions.currencyinfo) {
                localeData.currencyInfo = Object.keys(localeData.currencyDisplayNames).sort(function (a, b) {
                    return localeData.currencyDisplayNames[a] < localeData.currencyDisplayNames[b] ? -1 :
                        (localeData.currencyDisplayNames[a] > localeData.currencyDisplayNames[b] ? 1 : 0);
                }).map(function (currencyId) {
                    return _.extend({
                        id: currencyId,
                        displayName: localeData.currencyDisplayNames[currencyId]
                    }, localeData.currencyDisplayNamesCount[currencyId]);
                });
            }
            delete localeData.currencyDisplayNames;
            delete localeData.currencyDisplayNamesCount;

            if (commandLineOptions.dateformats) {
                if (localeData.dateTimePatterns && localeData.defaultDateTimePatternName) {
                    localeData.defaultDateTimePattern = localeData.dateTimePatterns[localeData.defaultDateTimePatternName];
                }

                if (localeData.dateFormats) {
                    ['short', 'medium', 'long', 'full'].forEach(function (length) {
                       localeData.dateFormats.basic[length + 'DateTime'] = localeData.dateTimePatterns[length]
                           .replace(/\{0\}/g, localeData.dateFormats.basic[length + 'Time'])
                           .replace(/\{1\}/g, localeData.dateFormats.basic[length + 'Date']);
                    });
                }
                // Inspied by date_parts_order in DateTime::Locale::Base:
                localeData.datePartsOrder = localeData.dateFormats.basic.shortDate.replace(/[^dmy]/gi, '').toLowerCase().replace(/(\w)\1+/g, "$1");
            } else if (!commandLineOptions.dateintervalformats) {
                delete localeData.dateFormats;
                delete localeData.defaultDateTimePatternName;
                delete localeData.relativeDayDisplay;
                delete localeData.fieldDisplayNames;
            }
            delete localeData.dateTimePatterns;

            if (!commandLineOptions.delimiters) {
                delete localeData.delimiters;
            }

            if (!commandLineOptions.listpatterns) {
                delete localeData.listPatterns;
            }

            if (!commandLineOptions.exemplarcharacters) {
                delete localeData.exemplarCharacters;
            }

            if (!commandLineOptions.dateintervalformats) {
                delete localeData.dateIntervalFormats;
                delete localeData.dateIntervalFallbackFormat;
            }

            if (!commandLineOptions.numberformats) {
                delete localeData.numberSymbols;
            }

            if (!commandLineOptions.unitpatterns) {
                delete localeData.unitPatterns;
            }

            localeDataByTargetLocaleId[targetLocaleId] = localeData;
        });

        var localeIdVarAst = uglifyJs.parser.parse(commandLineOptions.localeidvar)[1][0][1],
            statementAsts = [];
        targetLocaleIds.forEach(function (targetLocaleId) {
            statementAsts.push(['if',
                                ['binary', '===', localeIdVarAst, ['string', normalizeLocaleId(targetLocaleId)]],
                                ['block',
                                    Object.keys(localeDataByTargetLocaleId[targetLocaleId]).map(function (propertyName) {
                                        return ['stat',
                                            ['assign', true, ['dot', ['name', 'inter'], propertyName], uglifyAst.objToAst(localeDataByTargetLocaleId[targetLocaleId][propertyName])]
                                        ];
                                    })
                                ]
                               ]);
        });

        var omitByMethodName = {};
        if (!commandLineOptions.pluralrules) {
            omitByMethodName.trQuantity = true;
        }
        if (!commandLineOptions.listpatterns) {
            omitByMethodName.renderList = true;
        }
        if (!commandLineOptions.dateintervalformats) {
            omitByMethodName.makeDateIntervalRendererFromFormatString = true;
            omitByMethodName.makeDateIntervalRenderer = true;
            omitByMethodName.makeDateIntervalRendererFromGreatestDifferences = true;
        }
        if (!commandLineOptions.dateformats && !commandLineOptions.dateintervalformats) {
            omitByMethodName.tokenizeDateFormat = true;
            omitByMethodName.getCodeFragmentForDateField = true;
            omitByMethodName.getDateFormat = true;
            omitByMethodName.makeDateRenderer = true;
            omitByMethodName.makeDateRendererSource = true;
            omitByMethodName.getBestICUFormatId = true;
            omitByMethodName.adaptICUFormat = true;
        }
        if (!commandLineOptions.numberformats) {
            omitByMethodName.makeNumberRendererSource = true;
            omitByMethodName.makeNumberRenderer = true;
            omitByMethodName.makeFileSizeRenderer = true;
            omitByMethodName.makePercentageRenderer = true;
        }
        if (!commandLineOptions.unitpatterns) {
            omitByMethodName.makeUnitRenderer = true;
        }

        // These methods are always included (for now):
        //   makePatternRenderer
        //   tokenizePattern

        var interAst = uglifyJs.parser.parse(fs.readFileSync(Path.resolve(__dirname, '../lib/inter.js'), 'utf-8')),
            objectLiteralKeyValues = interAst[1][0][1][3][1];
        for (var i = 0 ; i < objectLiteralKeyValues.length ; i += 1) {
            if (omitByMethodName[objectLiteralKeyValues[i][0]]) {
                objectLiteralKeyValues.splice(i, 1);
                i -= 1;
            }
        }

        var javaScriptString = uglifyJs.uglify.gen_code(['toplevel', interAst[1].concat(statementAsts)], {beautify: true});
        if ('o' in commandLineOptions) {
            fs.writeFile(commandLineOptions.o, javaScriptString, 'utf-8', this);
        } else {
            console.log(javaScriptString);
            this();
        }
    });
